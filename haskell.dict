(1/)
(/2)
::
=>
->
<-
++
!!
$
.
>>
>>=
<*>
/=
==
>=
<=
>
<
words
unwords xs
lines
unlines xs
nub xs
getLine
putStrLn
map f xs
fmap
length xs
module
import
qualified
as
do
let
in
where
case
of
if
then
else
main
Data.List
sort
group
maximumBy
maximum xs
minimum xs
findIndex f xs
show
read
Maybe
Just
Nothing
return v
pure v
String
Integral
Int
Char
head xs
tail xs
init xs
last xs
data
class
instance
newtype
Bool
Float
type
const v v'
id v
take n xs
iterate f v
concat xss
repeat xs
cycle xs
replicate n v
sum xs
product xs
**
^
sqrt
abs
Data.Char
chr
ord
getChar
putChar
otherwise
zip
unzip
zipWith
filter p xs
reverse xs
lookup k ts
elem
notElem
any
all
&&
||
or
and
flip f x y
foldl
foldr
odd
even
takeWhile p xs
dropWhile p xs
span p xs
break p xs
succ
max l r
min l r
null
drop
mod
div
fst t
snd t
System.IO
isEOF
truncate
round
floor
ceiling
Data.List.Split
splitOn a as
curry
uncurry
Data.Ord
comparing
